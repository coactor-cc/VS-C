global
// JavaScript code  
// context 判断还存在问题，在内嵌公式$$左右域的临界处问题

function math(context) {
    return context.scopes.some(s => s.includes("math"));
}

//text environment
function text(context) {
    return !(math(context)||code(context));
}

//fenced code environment
function code(context) {
    return context.scopes.some(s => s.includes("fenced_code"));
}

//cpp environment
function cpp(context) {
    return context.scopes.some(s => s.includes("cpp"));
}


function createTable(rows, cols) {
    let ret = "";
    let order = 1;
    for (let i = 0; i < parseInt(rows) + 2; i++) {
        for (let j = 0; j < parseInt(cols); j++) {
            if (i === 1) {
                ret += "|---";
            } else {
                ret += "| $" + (order).toString() + " ";
                order++;
            }
        }
        ret += "|\n"
    }
    return ret;
}


function gen_matrix(nrow, ncol) {
	let results = "";
	let order = 1;
	for (var i=1; i <= nrow; i++){
		results +="	${" + order + ":1}";
        order ++;
		for(var j = 1; j < ncol; j++){
			results += " & ${" + order + ":$"+((i-1)*ncol+1)+"}";
			order ++;
		}
		results +=" \\\\\\";
		if(i!= nrow)
			results+="\n";
	}
	return results;
}

endglobal
# ================== note:trigger 规范:少用x,y,z,f,u,v,w开头的trigger,s少使用英语音节

# 支持visual|支持优先级的snips
# 有意思的snips

# snippet rij "mrij" iAm
# (${1:x}_${2:n})_{${3:$2} \\in ${4:N}}$0
# endsnippet

# TODO auto $visual$和优先级
context math(context)
snippet fr "frac" iAm
\\frac{${VISUAL}}{$1}
endsnippet

context math(context)
snippet bar "bar" iAm
\\overline{${1:${VISUAL}}}
endsnippet

snippet `(.*),,` "auto pramater expand" iA
``
head=m[1].lastIndexOf("(");
var ll=m[1].substring(0,head)
var lr=m[1].substring(head+1);
var tamp=""
for(var i=0; i<lr.length-1; i++)
	tamp+=lr[i]+",";
tamp="("+tamp+lr[lr.length-1]
rv=ll+tamp
``
endsnippet


context text(context)
snippet `table\s(\d)(\d)` "create table with rows and columns" wA
``
rv = createTable(m[1], m[2]);
``
endsnippet

# == Matrix ==

# ==== Static Matrix ====

snippet vecc "column vector" iAm
\begin{bmatrix}
	${1:x}_1 \\\\ ${1:x}_2 \\\\ \vdots \\\\ ${1:x}_${2:n} 
\end{bmatrix}
endsnippet

snippet vecr "row vector" iAm
\begin{bmatrix} 
	${1:x}_1, ${1:x}_2, \cdots, ${1:x}_${2:n}
\end{bmatrix}$0
endsnippet


snippet `(b|p|v)mate` "matrixn" iAm
\\begin{``rv = m[1]``matrix}
	${1:1}  &0  &\\cdots&0  \\\\
	0  &${2:$1}  &\\cdots&0  \\\\
	\\vdots&\\vdots&\\ddots&\\vdots\\\\
    0  &0  &\\cdots&${3:$1}   
\\end{``rv = m[1]``matrix}
endsnippet

priority 300
snippet `(b|p|v)matn` "matrixn" iAm
\\begin{``rv = m[1]``matrix}
	${1:1}&${2:1}&\\cdots&${4:1}\\\\
	${5:1}&${6:1}&\\cdots&${8:1}\\\\
	\\vdots&\\vdots&\\ddots&\\vdots\\\\
	${13:1}&${14:1}&\\cdots&${16:1}
\\end{``rv = m[1]``matrix}
endsnippet

priority 300
snippet `(b|p|v)mat n` "matrix_n" iAm
\\begin{``rv = m[1]``matrix}
    ${1:a}_{11} & ${1:a}_{12} & \\cdots & ${1:a}_{1n} \\\\
    ${1:a}_{21} & ${1:a}_{22} & \\cdots & ${1:a}_{2n} \\\\
    \\vdots & \\vdots & \\ddots & \\vdots \\\\
    ${1:a}_{n1} & ${1:a}_{n2} & \\cdots & ${1:a}_{nn}
\\end{``rv = m[1]``matrix}
endsnippet

priority 300
snippet `(b|p|v)mat t` "matrix_nt" iAm
\\begin{``rv = m[1]``matrix}
    ${1:a}_{11} & ${1:a}_{21} & \\cdots & ${1:a}_{n1} \\\\
    ${1:a}_{12} & ${1:a}_{22} & \\cdots & ${1:a}_{n2} \\\\
    \\vdots & \\vdots & \\ddots & \\vdots \\\\
    ${1:a}_{1n} & ${1:a}_{2n} & \\cdots & ${1:a}_{nn}
\\end{``rv = m[1]``matrix}
endsnippet


# ==== Dynamic Matrix ====

priority 300
snippet `(b|p|v)mata\s([1-9])` "bmatrix" iAm
\\begin{``rv = m[1]``matrix}
``
	let len = m[2];
	let results = "";
	for (var i=0; i<len; i++){
		results += "	$1 &".repeat(len-1) + " $1 \\\\\\\\\n";
	}
	rv = results;
``\\end{``rv = m[1]``matrix}$0
endsnippet

priority 300
snippet `(b|p|v)mat\s([1-9])([1-9])` "bmatrix" iAm
\\begin{``rv = m[1]``matrix}
``
	rv = gen_matrix(m[2],m[3]);
``
\\end{``rv = m[1]``matrix}$0
endsnippet



// 格式和功能块

snippet todo "TODO" Ai

TODO $1  
endsnippet

context math(context)
snippet case "case" Abm
\begin{cases}
$1
\end{cases}
endsnippet

context math(context)
snippet aligned "aligend" Abm
\begin{aligned}
$1
\end{aligned}
endsnippet

context math(context)
snippet dis "displaystyle" iAm
\displaystyle 
endsnippet

snippet （ "()" Ai
($1)$0
endsnippet

snippet ( "()" Ai
($1)$0
endsnippet

snippet { "{}" Ai
{$1}$0
endsnippet


context text(context)
snippet def "定义" Aw
**定义** 
endsnippet

context text(context)
snippet 解 "解" Abw
**解** 
endsnippet

context text(context)
snippet 性质 "性质" Abw
**性质$1** $0
endsnippet

context text(context)
snippet 定理 "定理" Abw
**定理$1** $0
endsnippet

context text(context)
snippet 证 "证明" Abw
**证** 
endsnippet

context text(context)
snippet `(有|则|即|得)\s` "换行" iA
``
rv=m[1];
``
$$
$1
$$
endsnippet


# === DS Symbol ===
snippet Om "微操作" Ai
$\Omicron(${1:n})$$0
endsnippet


# === CO Symbol ===
context math(context)
snippet uop "微操作" Aim
{\rm\mu OP}
endsnippet

context text(context)
snippet uop "微操作" Ai
${\rm\mu OP}$
endsnippet

# context text(context)
# snippet cpu "cpu" Ai
# CPU
# endsnippet

context math(context)
snippet tc "时钟周期" im
T_C
endsnippet

# ==== Possibility Symbol ====

context math(context)
snippet Pr "Pr" iAm
\operatorname{Pr}
endsnippet

context math(context)
snippet Var "Var" iAm
\operatorname{Var}
endsnippet

context math(context)
snippet Cov "Cov" iAm
\operatorname{Cov}
endsnippet

context math(context)
snippet Exp "Expected" iAm
\mathbb{E}(${1:X})
endsnippet

context math(context)
snippet simiid "iid" iAm
\overset{iid}{\sim}
endsnippet


# === LA Symbol ===
context math(context)
snippet TR "inverse" iAm
^{\mathsf{T}}
endsnippet

context math(context)
snippet star "伴随" iAm
^{*}
endsnippet

snippet invs "inverse" iAm
^{-1}
endsnippet

snippet dig "digree" iAm
^{\circ}
endsnippet
# === math Symbols ===
## === prove ===
context math(context)
snippet exist "exist" iAm
\exists 
endsnippet

context math(context)
snippet all "forall" iAm
\forall 
endsnippet

context math(context)
snippet bec "because" iAm
\because 
endsnippet

context math(context)
snippet thr "therefore" iAm
\therefore 
endsnippet

## === alg ===

context math(context)
snippet geq ">=" Aim
\geq 
endsnippet

context text(context)
snippet geq ">=" Ai
≥
endsnippet

context math(context)
snippet leq "<=" Aim
\leq 
endsnippet

context text(context)
snippet leq "<=" Ai
≤
endsnippet

context text(context)
snippet lgeq "!=" Ai
≠ 
endsnippet

context math(context)
snippet == "==" Aim
\equiv 
endsnippet

context math(context)
snippet ~~ " Amppro equals" iAm
\approx 
endsnippet

context math(context)
snippet ~= " Amppro equals2" iAm
\cong 
endsnippet

context math(context)
snippet +- "+-" Aim
\pm 
endsnippet

context math(context)
snippet -+ "-+" Aim
\mp 
endsnippet

context math(context)
snippet times "times" Aim
\times 
endsnippet

### == Fraction Match ==
context math(context)
snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction no ()" Am
\frac{``rv = m[1]``}{$1}$0
endsnippet

context math(context)
snippet `^.*\}/` "Fraction with {}" Am
``
    let str = m[0];
    str = str.slice(0, -1);
    let lastIndex = str.length - 1;

    let depth = 0;
    let i = str.length - 1;

    while (true) {
        if (str[i] == '}') depth += 1;
        if (str[i] == '{') depth -= 1;
        if (depth == 0) break;
        i -= 1;
    }

    let results = str.slice(0, i) + "\\frac{" + str.slice(i+1, -1) + "}";
    rv = results;
``{$1}$0
endsnippet

## === arrow ===

context math(context)
snippet awr "rightarrow" Aim
\rightarrow 
endsnippet

context math(context)
snippet awl "leftarrow" Aim
\leftarrow 
endsnippet

context math(context)
snippet awLR "Leftrightarrow" Aim
\Leftrightarrow 
endsnippet

context text(context)
snippet awl "左" Ai
←
endsnippet

context text(context)
snippet awr "右" Ai
→
endsnippet

context math(context)
snippet log "log" iAm
\log
endsnippet

context math(context)
snippet del "delta" Aim
\Delta ${0:x}
endsnippet

context math(context)
snippet epsilon "epsilon" Aim
\varepsilon 
endsnippet

context math(context)
snippet oo "\infty" iAm
\infty
endsnippet

context math(context)
snippet ... "cdots" iAm
\cdots
endsnippet

context math(context)
snippet RR "实数空间" Aim
\mathbb{R}
endsnippet

context text(context)
snippet RR "实数空间" Ai
$\mathbb{R}$
endsnippet

context math(context)
snippet U0 "U0" Aim
\mathring{U}
endsnippet

context math(context)
snippet set "\{ \}" Aim
\\{ ${1} \\}$0
endsnippet

context math(context)
snippet abs "absolute value" iAm
\left\vert ${1} \right\vert $0
endsnippet

context math(context)
snippet ceil "ceil" iAm
\left\lceil $1 \right\rceil $0
endsnippet

context math(context)
snippet floor "floor" iAm
\left\lfloor $1 \right\rfloor$0
endsnippet

## ===数学公式函数===

context math(context)
snippet fun "function in math" Aim
f(${1:x})$0
endsnippet

context text(context)
snippet fun "function" Ai
``
rv="$f("
``${1:x})$
endsnippet

context math(context)
snippet rm "rm" Aim
{\rm ${1:d}}$0
endsnippet


context math(context)
snippet sqrt "sqrt" Aim
\sqrt{$1}$0
endsnippet

context math(context)
snippet round "partial" Aim
\frac{\partial ${1:z}}{\partial ${2:u}}$0
endsnippet

context math(context)
snippet f' "微分" Aim
\frac{{\rm d}${1:y}}{{\rm d}${2:x}}
endsnippet

context math(context)
snippet max "max补全" im
\max\{$1\\}$0
endsnippet

context math(context)
snippet sum "累加" Aim
\sum_{i=${1:1}}^{${2:n}}$0
endsnippet

context math(context)
snippet prod "累乘" Aim
\prod_{i=${1:1}}^{${2:n}}$0
endsnippet

context math(context)
snippet lim "lim补全" Aim
\lim_{${1:\Delta x}\rightarrow ${2:\infty}}$0
endsnippet

context math(context)
snippet int "int补全" Aim
\int_{${1:-\infty}}^{${2:\infty}}${3:f(x)}{\rm d}${0:x}
endsnippet

## ===上标、下标===
context math(context)
snippet pow "up" Aim
^{${1:2}}$0
endsnippet

snippet vector "vector" Aim
\vec ${0:x}
endsnippet

### === 自动下标 ===
context math(context)
snippet `(?<=[A-Za-z])(\d)` "auto subscript math" Am
_``rv=m[1];``
endsnippet



context text(context)
snippet `([A-Za-z])(\d)` "auto subscript text" Am
``
rv="$"+m[1]+"_"+m[2]+"$";
``
endsnippet

context math(context)
snippet `\b([a-zA-Z])n(\d)` "x[n+1]" iAm
``rv = m[1]``_{${1:n}+``rv = m[2]``}$0
endsnippet

context math(context)
snippet `(?<=[A-Za-z])\s(n|k|i|j)` "auto subscript n" Am
_``rv=m[1];``
endsnippet


